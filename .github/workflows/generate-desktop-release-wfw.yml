name: Generate Pororoca Desktop

on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      rid:
        required: true
        type: string
      installation:
        required: false
        type: string
      enableUITesting:
        required: true
        type: boolean

jobs:
  generatePororocaDesktop:

    runs-on: ${{ inputs.os }} # we run many different builds
    
    env:
      OUTPUT_FOLDER: ${{ format('./out/{0}/', inputs.rid) }}
      PUBLISH_SINGLE_FILE: ${{ startsWith(inputs.rid, 'win') }}
      RID: ${{ inputs.rid }}
      WINDOWS_INSTALLER_RELEASE: ${{ startsWith(inputs.rid, 'win') && inputs.installation == 'withInstaller' }}
      ENABLE_UI_TESTING: ${{ inputs.enableUITesting }}
      
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.403

    - name: Install NSIS (Windows installer version only)
      if: ${{ env.WINDOWS_INSTALLER_RELEASE == 'true' }}
      uses: repolevedavaj/install-nsis@v1.0.0
      with:
        nsis-version: 3.09
    
    - name: Add NSIS to PATH (Windows installer version only)
      if: ${{ env.WINDOWS_INSTALLER_RELEASE == 'true' }}
      shell: pwsh
      run: |
        echo "${env:ProgramFiles(x86)}\NSIS" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Check if NSIS was added to PATH (Windows installer version only)
      if: ${{ env.WINDOWS_INSTALLER_RELEASE == 'true' }}
      shell: pwsh
      run: makensis /VERSION

    - name: Restore solution
      run: dotnet restore --nologo --verbosity quiet
      
    - name: Build solution
      run: dotnet build --no-restore --configuration Release --nologo --verbosity quiet

    - name: Execute unit tests
      run: dotnet test --no-build --configuration Release --nologo --verbosity quiet --filter FullyQualifiedName!~Pororoca.Test.Tests

    - name: Read release version
      shell: pwsh
      run: |
        ([XML]$desktopCsprojXml = Get-Content ./src/Pororoca.Desktop/Pororoca.Desktop.csproj)
        $versionName = $desktopCsprojXml.Project.PropertyGroup.Version
        echo "VERSION_NAME=${versionName}" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          
    - name: Generate Pororoca Desktop dlls
      shell: pwsh
      run: |
        [void](mkdir $env:OUTPUT_FOLDER);
        dotnet publish ./src/Pororoca.Desktop/Pororoca.Desktop.csproj `
        --verbosity quiet `
        --nologo `
        --configuration Release `
        -p:PublishSingleFile=${env:PUBLISH_SINGLE_FILE} `
        -p:PublishForInstallOnWindows=${env:WINDOWS_INSTALLER_RELEASE} `
        -p:UITestsEnabled=${env:ENABLE_UI_TESTING} `
        --self-contained true `
        --runtime ${env:RID} `
        --output ${env:OUTPUT_FOLDER};
        if ($env:RID -like "*win*")
        {
          # let's copy the msquic.dll file next to the generated .exe
          Copy-Item -Path "./src/Pororoca.Desktop/bin/Release/net8.0/${env:RID}/msquic.dll" -Destination $env:OUTPUT_FOLDER
        }
    
    - name: Rename executable
      shell: pwsh
      run: |
        if ($env:RID -like "*win*")
        {
          Rename-Item -Path "${env:OUTPUT_FOLDER}/Pororoca.Desktop.exe" -NewName "Pororoca.exe"
        }
        else
        {
          Rename-Item "${env:OUTPUT_FOLDER}/Pororoca.Desktop" -NewName "Pororoca"
        }
    
    - name: Set executable attributes (UNIX only)
      if: ${{ startsWith(inputs.rid, 'linux') || startsWith(inputs.rid, 'osx') }}
      shell: pwsh
      run: chmod +x "${env:OUTPUT_FOLDER}/Pororoca"
      
    - name: Make Pororoca.app structure (Mac OSX only)
      if: ${{ startsWith(inputs.rid, 'osx') }}
      shell: pwsh
      run: |
        [void](mkdir "${env:OUTPUT_FOLDER}/Pororoca.app")
        [void](mkdir "${env:OUTPUT_FOLDER}/Pororoca.app/Contents")
        [void](mkdir "${env:OUTPUT_FOLDER}/Pororoca.app/Contents/MacOS")
        [void](mkdir "${env:OUTPUT_FOLDER}/Pororoca.app/Contents/Resources")
        Copy-Item -Path "./src/Pororoca.Desktop.MacOSX/Info.plist" -Destination "${env:OUTPUT_FOLDER}/Pororoca.app/Contents/"
        Copy-Item -Path "./src/Pororoca.Desktop.MacOSX/pororoca.icns" -Destination "${env:OUTPUT_FOLDER}/Pororoca.app/Contents/Resources/"
        Get-ChildItem $env:OUTPUT_FOLDER -File | Copy-Item -Destination "${env:OUTPUT_FOLDER}/Pororoca.app/Contents/MacOS/" -Force
        Get-ChildItem $env:OUTPUT_FOLDER -File | Remove-Item
    
    # so Linux users can create desktop launchers
    - name: Copy logo (Linux only)
      if: ${{ startsWith(inputs.rid, 'linux') }}
      shell: pwsh
      run: Copy-Item -Path "./pororoca.png" -Destination $env:OUTPUT_FOLDER
      
    - name: Copy icon for Windows installer
      if: ${{ env.WINDOWS_INSTALLER_RELEASE == 'true' }}
      shell: pwsh
      run: Copy-Item -Path "./src/Pororoca.Desktop/Assets/pororoca_icon.ico" -Destination $env:OUTPUT_FOLDER
   
    - name: Copy licence
      shell: pwsh
      run: Copy-Item -Path "./LICENCE.md" -Destination $env:OUTPUT_FOLDER
      
    - name: Compress package
      if: ${{ inputs.installation != 'withInstaller' }}
      shell: pwsh
      run: |
        if ($env:RID -like "win*") {
          $zipName = "Pororoca_${env:VERSION_NAME}_${env:RID}_portable.zip";
        } else {
          $zipName = "Pororoca_${env:VERSION_NAME}_${env:RID}.zip";
        }
        if ($IsWindows) {
          Compress-Archive -CompressionLevel Optimal -Path $env:OUTPUT_FOLDER -DestinationPath "./out/${zipName}"	
        } else {
          cd $env:OUTPUT_FOLDER
          zip -9 -r ../${zipName} *
          cd ../..
        }
        Remove-Item $env:OUTPUT_FOLDER -Force -Recurse -ErrorAction Ignore
    
    - name: Make installer for Windows
      if: ${{ env.WINDOWS_INSTALLER_RELEASE == 'true' }}
      shell: pwsh
      run: |
        $installerFileName = "Pororoca_${env:VERSION_NAME}_${env:RID}_installer.exe";
        $installerOutFileAbsolutePath = $((Resolve-Path ".\out\").ToString()) + "\" + $installerFileName
        $installerFilesDirAbsolutePath = (Resolve-Path $env:OUTPUT_FOLDER).ToString()
        # makensis must be added to PATH
        # -WX ` # treat warnings as errors
        # -V2 ` # verbosity no info
        makensis -WX -V2 "/XOutFile ${installerOutFileAbsolutePath}" `
          "/DSHORT_VERSION=${env:VERSION_NAME}" `
          "/DINPUT_FILES_DIR=${installerFilesDirAbsolutePath}" `
          .\src\Pororoca.Desktop.WindowsInstaller\Installer.nsi
        Remove-Item $env:OUTPUT_FOLDER -Force -Recurse -ErrorAction Ignore

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        path: './out/'
